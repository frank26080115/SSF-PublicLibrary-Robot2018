<html>
<head>
<title>Arduino Programming</title>
<link rel="stylesheet" type="text/css" href="css/stylesheet.css" title="style" />
<link rel="stylesheet" type="text/css" href="css/divtable.css" title="style" />

<script type="text/javascript" src="js/javascript.js"></script>

<script type="text/javascript">

function body_onload() {
	makeAllVideos("img/film_animation.gif");

	makeTableOfContents("tableofcontents", "h2");

	makeAllHidables();
}

</script>

</head>
<body onload="body_onload()">
<div class="body_div">

<div id="banner_black"><img src="img/banner_black.png" /></div>
<div id="banner_white"><img src="img/banner_white.png" /></div>

<h1>Arduino Programming</h1>

<p>This class will cover how to use Arduino, and then how to program the Arduino Nano on your robot.</p>

<div class="center_outer"><div class="center_inner"><img src="img/arduino/arduino.png" /></div></div>
<div class="center_outer"><div class="center_inner"><img src="img/arduinonano.png" /></div></div>

<fieldset><legend>Before coming to class</legend>
<p>Obviously, you need to have completely built your robot first.</p>
<p>Everything in this class can be done at home, but there will be a live class at the library just in case you have questions. Before coming to the library, please PLEASE please try to read all of this lesson before coming to the live class. Even better, if you have your own computer at home, try to do as much of this lesson on your own as possible, and come to the class only for help.</p>
</fieldset>

<p>If you are using the library's computer, then do not worry about installing the Arduino IDE or device drivers, because the library's computers already has them installed.</p>

<h3>You do need to bring a USB drive to download the sketches and save your sketches, if you are using the library's computers.</h3>

<fieldset><legend>Your Own Computer</legend>
<p>You really REALLY should have your own laptop by now. If you've completed the previous two classes, you have definitely earned it. Having access to a computer and the internet is essential for continued learning from research and experimentation. It is my hope that this robot and these classes encourage you to keep learning on your own. You don't have to like school, you don't have to like homework or tests, but you should love learning and discovery.</p>

<p>If you are coming to class with your own computer, please make sure all of the Arduino software and the device drivers you need are already installed. This will save us a lot of time.</p>
</fieldset>

<p>If you don't understand anything here, please try to use the internet to answer your question (I cover <a href="#AskingQuestionsandparticipatinginonlinecommunities">how to participate in online communities at the end of this lesson!</a>), or come to the library to ask me directly (bring your computer if you have one!)</p>

<fieldset class="hidable">
<legend>You need basic computer skills first</legend>
<div>
<p>You need to know how to use a computer before being able to learn how to program a computer (the Arduino Nano microcontroller is just a very small computer). You should already have the following skills before coming to class:</p>
<ul>
	<li>installing software</li>
	<li>running software</li>
	<li>navigating folders</li>
	<li>creating, renaming, deleting folders</li>
	<li>copying and moving files and folders</li>
	<li>extracting (aka unzipping) ZIP files (compressed archive files)</li>
</ul>
<p>If possible, please set your file explorer to show file name extensions.</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/show_file_ext.png"><img src="img/arduino/show_file_ext.png" /></a></div></div>
<p>This class will not teach you these skills, because they are better taught in a class that is focused on basic computer usage.</p>
</div>
</fieldset>

<br />
<br />
<hr />
<br />
<br />

<div id="tableofcontents"></div>

<h2>Installing Arduino IDE</h2>

<p>Remember: If you are using the library's computer, then you don't need to do any installation! Skip this step if you are using the library's computer.</p>

<p>IDE means <i>Integrated Development Environment</i>, in this case, it means a piece of software that includes a text editor designed for coding, a compiler that can translate code into instructions, and a way to write (upload) those instructions into your microcontroller. There are other IDEs out there for different programming languages and with different features. The Arduino IDE is only designed for different types of Arduinos.</p>

<p>The Arduino IDE can be downloaded from <a href="https://www.arduino.cc/en/Main/Software" target="_blank">here</a>. Simply download the latest version of the IDE, and then install it to your computer. During the installation, follow the instructions provided in the installation, and use the default options.</p>

<h2>Installing Device Drivers</h2>

<p>Remember: If you are using the library's computer, then you don't need to do any installation! Skip this step if you are using the library's computer.</p>

<p>Download and install the device drivers from SparkFun's page <a href="https://learn.sparkfun.com/tutorials/serial-basic-hookup-guide#drivers-if-you-need-them" target="_blank">here</a>. Look for "<b>drivers if you need them</b>" and download the one for your operating system. You will need to extract (aka unzip) the downloaded file first, and then run the "<b>setup.exe</b>" to perform the installation. Follow the instructions provided during the installation, use the default options, and give the computer permission if it asks for permission (press "allow" or "trust" when the computer asks).

<h2>Preparing the Sketchbook</h2>

<p>Arduino likes to call projects as <i>sketches</i> and saves them in a sketchbook. This is because Arduino was originally derived from software designed for artists. If you are on a library computer, we need to put the sketchbook on your USB drive. If you are on your own computer, then you can put the sketchbook wherever you want (or leave it in the default location).</p>

<p>Sketchbooks also contains <i>libraries</i>. In computer programming, a library is basically some code that you can reuse. If you have five different robot projects that all use servos, you can use just one servo library, instead of writing the servo code five times. Usually, the user of the library does not ever edit the library, but with Arduino libraries, you can look at library code and even edit it.</p>

<p>I have prepared a sketchbook for you already, it contains pieces of code and also the libraries you need. <br /> <a href="ArduinoSketchbook.zip"><h3>Click here to download the sketchbook</h3></a> <br /> Either save this to your own computer or save it to the USB drive. It is a ZIP file, so you need to extract (aka unzip) the folder from inside the ZIP file to somewhere on your own computer or to your USB drive. It's almost the same as copying the folder.</p>

<fieldset class="hidable">
<legend>Github</legend>
<div>
<p>Github is a website where people share code, and other files. I've included links to where the sketches are shared on Github. So you can follow along even if you cannot download the sketchbook, do not have Arduino IDE installed, or reading from a smartphone.</p>
<p>Example <a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook" target="_blank">main sketchbook folder Github link</a></p>
</div>
</fieldset>

<div class="center_outer"><div class="center_inner"><a href="img/arduino/copy_sketchbook.png"><img src="img/arduino/copy_sketchbook.png" width="100%" /></a></div></div>

<p>You need to tell the Arduino IDE where the sketchbook is (where you copied/extracted it to). Run the Arduino IDE and use the "preferences" dialog to change the sketchbook location. See screenshot below</p>

<div class="center_outer"><div class="center_inner"><a href="img/arduino/preferences_for_sketchbook.png"><img src="img/arduino/preferences_for_sketchbook.png" /></a></div></div>

<h2>Running Code</h2>

<p>Put all 4 AA batteries into your robot first.</p>

<fieldset class="hidable">
<legend>If you are using your own computer</legend>
<div>
<p>If you are using your own computer, just plug in your USB cable between the Arduino Nano and your computer.</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/usb_cable.jpg"><img src="img/arduino/usb_cable.jpg" width="100%" /></a></div></div>
<p>The cable is a USB mini-B cable. (not to be confused with a USB micro cable, which looks different)</p>
</div>
</fieldset>

<fieldset class="hidable">
<legend>If you are using a library computer</legend>
<div>
<p>If you are using a library computer, then you will be provided with a special programming cable that I made. Please do not take this home with you, you do not need it at home, you can use an ordinary USB cable at home.</p>
<p>The square part of this dongle has a tab that goes into the computer's USB port, pay attention to which side faces up.</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/dongle_usb.jpg"><img src="img/arduino/dongle_usb.jpg" width="100%" /></a></div></div>
<p>The end of the cable with the pins will plug into your robot's circuit board. There's a small group of female sockets that say "PROG", plug it in there, as shown in the picture:</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/dongle_plug.jpg"><img src="img/arduino/dongle_plug.jpg" width="100%" /></a></div></div>
</div>
</fieldset>

<p>Start the Arduino IDE if you don't already have it open. Then you need to make sure that you've selected Arduino Nano as your board, and selected the correct port.</p>

<div class="center_outer"><div class="center_inner"><a href="img/arduino/arduino_select_board.png"><img src="img/arduino/arduino_select_board.png" /></a></div></div>

<p>(the port number might be different, that's OK, the number could be different on a different computer, or the computer might have more than one port, if you pick wrong, just guess again later)</p>

<p>Inside the Arduino IDE, open the "HardwareTestLEDsBlink" sketch (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/HardwareTestLEDsBlink/HardwareTestLEDsBlink.ino" target="_blank">github link</a>)...</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/open_sketch_blank.png"><img src="img/arduino/open_sketch_blank.png" /></a></div></div>
<p>Once the sketch is open, simply press the upload button...</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/click_upload.png"><img src="img/arduino/click_upload.png" /></a></div></div>
<p>The compilation process will start first, and then the upload process will start. Wait for both to finish.</p>

<p>The LEDs on your robot should start to blink!</p>

<div class="center_outer"><div class="center_inner"><img src="img/arduino/led_blink.gif" width="100%" /></div></div>

<p>(NOTE: If you click <i>verify</i> instead of upload, the compiler will check if your code is understandable first, making sure it has no obvious mistakes, but it will not actually upload it. Uploading will automatically do the verification first.)</p>

<h2>Debugging</h2>

<p>When computers were first invented, there was actually a insect that crawled into the computer that caused problems, so removing the bug fixed it. And that's how the term <i>de<b>bug</b></i> came to be. Now in the modern world, debugging means more than just getting getting rid of bugs. Debugging is a term that sort of means "finding out what your code is doing", and then it also sometimes mean "getting rid of bugs".</p>

<p>Debugging typically involves a combination of gathering information and performing experiments (so you can gather more information). With Arduino, we can "gather information" through its pins (for example, turning on the LED if something happens), or through its communication port (we can make the Arduino write information onto a computer screen). By "performing experiments", I mean on Arduino, we can either give it different input signals, or we can change the code it runs slightly, and see what the result is through "gathering information". With more experiments, we get more clues as to what is wrong.</p>

<p>Some bugs happen too fast, so using the pins and LEDs wouldn't work because the LED blink would be too fast to see, so people generally prefer to write information to a computer screen instead. To make Arduino write stuff onto a computer screen, we use the Arduino Nano's <i>serial port</i>, which writes information that we can view with Arduino IDE's <i>serial monitor</i>.</p>

<div class="center_outer"><div class="center_inner"><a href="img/arduino/serial_monitor.png"><img src="img/arduino/serial_monitor.png" /></a></div></div>

<p>Try uploading the sketch named "SerialPortDemo" (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/SerialPortDemo/SerialPortDemo.ino" target="_blank">github link</a>). It will count a number through the serial terminal.</p>

<div><video controls="controls" loop="loop" preload="none">
  <source src="vid/serialportdemo.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>

<h2>Troubleshooting Errors</h2>

<p>If the Arduino IDE says there is an error, what should you do?</p>
<p>There should be a message saying what the error is, you can search up the error on a search engine for help.</p>
<p>Sometimes the error says that there's a problem with a particular line of code. You should then go read that line of code, and see if you made any mistakes.</p>
<p>Sometimes the error says that something is missing (like a missing variable, missing function, or a missing file). Then obviously you should check if it is actually missing, or maybe you misspelt a word. If you are sure that the thing is actually there, then ask "why can't the computer find it?" and think of the possibilities.</p>
<p>Most of the errors you get are probably just typos, spelling mistakes, or missing punctuation in the code.</p>
<p>If you get errors during upload, it might be because you have the wrong board or wrong port selected, and you can also try unplugging your USB cable, and then plugging it back in again.</p>

<h2>Code Comments</h2>

<p>Sometimes we want to write something in our code to explain something or to just make a note, but since programming languages have strict rules, normal English will confuse it. A <i>code comment</i> is a section of code that the computer ignores completely, so within a code comment, you can write whatever you want, in any language you want. Sometimes we even draw crude pictures using code comments.</p>

<p>In the Arduino programming language (which is also the same as C++), a code comment can be started with <span class="inlinecode">/*</span> and ended with <span class="inlinecode">*/</span>, or if your comment is just one line, you can start it with <span class="inlinecode">//</span> and it will automatically end at the end of the line.

<pre class="code">
/*
This is a big
multiple line
code comment
*/

// this is a small single line code comment

thisIsNotCodeComment(); // this is a code comment
</pre>

<h2>Testing the Robot</h2>

<p>We need to run more code to make sure all of our circuit works correctly, that all the components are not broken and all your soldering joints are done right. I have written a few sketches for you to run:</p>

<fieldset><legend>Sketch: HardwareTestMotorsSpin</legend><p>This will spin both motors and make your robot dizzy. This makes sure that both motors work and accepts your commands.</p>
<p>(<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/HardwareTestMotorsSpin/HardwareTestMotorsSpin.ino" target="_blank">github link</a>)</p>
<!-- <div><video controls="controls" loop="loop" preload="none">
  <source src="vid/demo_dance.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div> -->
<div class="center_outer"><div class="center_inner"><img src="img/arduino/spintest.gif" width="100%" /></div></div>
</fieldset>

<fieldset><legend>Sketch: HardwareTestSideSensors</legend><p>This will use the LEDs to show you what the side-facing sensors see, by making the LEDs dimmer or brighter. This checks if your side-facing sensors work and are connected correctly.</p>
<p>(<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/HardwareTestSideSensors/HardwareTestSideSensors.ino" target="_blank">github link</a>)</p>
<!-- <div><video controls="controls" loop="loop" preload="none">
  <source src="vid/demo_sidesensors.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div> -->
<div class="center_outer"><div class="center_inner"><img src="img/arduino/sidesensortest.gif" width="100%" /></div></div>
<p>You can also use the serial monitor to debug what values the sensors are reading</p>
</fieldset>

<fieldset><legend>Sketch: HardwareTestFloorSensors</legend><p>This will use the LEDs to show you what the floor sensors see (white or black surface), by making the LEDs dimmer or brighter. This checks if your floor sensors work and are connected correctly.</p>
<p>(<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/HardwareTestFloorSensors/HardwareTestFloorSensors.ino" target="_blank">github link</a>)</p>
<div><video controls="controls" loop="loop" preload="none" muted="muted">
  <source src="vid/floorsensortest_500.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>
<p>You can also use the serial monitor to debug what values the sensors are reading</p>
</fieldset>

<fieldset><legend>Sketch: HardwareTestPotentiometerAndButton</legend><p>This will use the LEDs to show you what the potentiometer is set to, and whether or not the button is being pressed. This checks if the button and potentiometer are connected correctly.</p>
<p>(<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/HardwareTestPotentiometerAndButton/HardwareTestPotentiometerAndButton.ino" target="_blank">github link</a>)</p>
<div><video controls="controls" loop="loop" preload="none" muted="muted">
  <source src="vid/potbuttontest_500.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>
<p>You can also use the serial monitor to debug what values the potentiometer is reading, and if the button is pressed.</p>
</fieldset>

<p>In each sketch, you should read the code, and read the code comments within the code to understand the code better.</p>

<h2>The "BookWorm" Library</h2>

<p>As I mentioned before, the sketchbook you've downloaded contains some code libraries. One of them is called "BookWorm", and you see code such as <span class="inlinecode">#include &lt;BookWorm.h&gt;</span> and <span class="inlinecode">BookWorm.someWords();</span> a lot.</p>

<p><span class="inlinecode">#include &lt;BookWorm.h&gt;</span> is how we tell the compiler and IDE to include the "BookWorm" library.</p>

<p>The BookWorm library (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/tree/master/ArduinoSketchbook/Libraries/BookWorm" target="_blank">github link</a>) is here to make the code easier to understand, and easier to write. It also prevents the robot from doing sometime really stupid during one of the homework exercises.</p>

<p>For example, when you want to read the left side floor sensors, without the library, you need to write <span class="inlinecode">x = analogRead(A3);</span>. But using the library, you can write <span class="inlinecode">x = BookWorm.readSensorLeftFloor();</span> instead.</p>

<p>How do you know what the library contains?</p>
<fieldset class="hidable">
<legend>Reading Library Code</legend>
<div>
<p>One way is to just read the code of the library. The files are inside your sketchbook (under "Libraries" then "BookWorm").</p>
<p>You will see many files, some of them are <span class="inlinecode">.cpp</span> files, meaning they are code files, and they mostly contain functions. Some are <span class="inlinecode">.h</span> files, these are header files, these usually only contain a list of the functions but not the contents of the functions. Header files also usually contain useful definitions of things.</p>
<p>If you open <span class="inlinecode">BookWorm.cpp</span> (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/blob/master/ArduinoSketchbook/Libraries/BookWorm/BookWorm.cpp" target="_blank">github link</a>), you can see functions that look like: </p>
<pre class="code">
unsigned int cBookWorm::readPotentiometer(void)
{
	return analogRead(pinPotentiometer);
}
</pre>
<p>... which means, whenever you write <span class="inlinecode">BookWorm.readPotentiometer();</span>, what your code will do is actually <span class="inlinecode">analogRead(A1);</span></p>
<p>If you read a bit above that piece of code, you can see a block of comment:</p>
<pre class="code">
/*
Reads the analog reading of the potentiometer

return:	unsigned 10 bit integer, range 0 to 1023,
		0 meaning rotated all the way down (counterclockwise),
		1023 meaning rotated all the way up (clockwise)

parameters:	none
*/
</pre>
<p>This is important, comments that look like this describes what the function does, what it will tell you (the return), and what it needs to know (the parameters). Libraries often have comments like this to help people understand how to use a function.</p>
<p>The <span class="inlinecode">BookWorm.h</span> header file (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/blob/master/ArduinoSketchbook/Libraries/BookWorm/BookWorm.h" target="_blank">github link</a>) contains a definition list of all the pins used on our robot. It looks like:</p>
<pre class="code">
#define pinButton           10
#define pinLedLeft           6
#define pinLedRight          5
#define pinLedBack          13
#define pinEmitterLeft       3
#define pinEmitterRight      4
#define pinSensorLeftFloor  A3
#define pinSensorLeftSide   A2
#define pinSensorRightFloor A6
#define pinSensorRightSide  A7
#define pinPotentiometer    A1
#define pinServoLeft         9
#define pinServoRight        7
#define pinTvRemoteInput     8
</pre>
<p>... and also a list of functions that you can use ...</p>
<pre class="code">
	void begin(void);
	void setLedLeft(int bright);
	void setLedLeftOn(void);
	void setLedLeftOff(void);
	void setLedRight(int bright);
	void setLedRightOn(void);
	void setLedRightOff(void);
	void setLedBackOn(void);
	void setLedBackOff(void);
	void setIrEmittersOn(void);
	void setIrEmittersOff(void);
	bool isButtonPressed(void);
	unsigned int readPotentiometer(void);
	unsigned int readSensorLeftSide(void);
	unsigned int readSensorLeftFloor(void);
	unsigned int readSensorRightSide(void);
	unsigned int readSensorRightFloor(void);
	void move(signed int left, signed int right);
</pre>
<p>Sometimes, comments are inside header files because code files can be very long, but I choose to put them in the code file since our code is very simple.</p>
</div>
</fieldset>

<h2>Continue Learning and Writing Code</h2>
<p>The best way to learn how to write code is to first read code, run the code, and then make changes to the code. When you read code, you will see patterns, you will see the same words or symbols being used over and over again, your brain should be able to eventually work out how to repeat these patterns to write code. Sometimes you will see a number in the code, maybe it's a delay for the LED blinking? Change it and run the code and see if the LED blinks faster or slower. Maybe it's how fast the motor spins? Change it and see if the motor spins faster or slower. <b>Play around, do not be afraid to make mistakes, mistakes can be undone or fixed and the robot is never going to break because of bad code.</b></p>

<p>Programming and computer science are huge subjects, I can't possibly write about all of them without literally quitting my job and becoming a full time author. But the beauty of Arduino is that it is open source and there is an enormous helpful online community around it and around electronics in general. It is very easy to find information and help, and there are plenty of websites with tutorials and guides for you to read.</p>

<p>But before I show you where to learn more, I need to make sure you can make the mental connection between what you read and our robot. Remember that our robot uses an Arduino Nano, and most websites will be writing about ordinary Arduinos (Uno, or Diecimila, or Duemilanove). All Arduinos have at least one LED, and one reset button. I will show you with a picture, so that when you read other tutorials and it talks about a LED or the reset button, you know where to look on the robot.</p>

<div class="center_outer"><div class="center_inner"><a href="img/arduino/uno_nano_compare.jpg"><img src="img/arduino/uno_nano_compare.jpg" width="100%" /></a></div></div>

<p>Our Arduino Nano has the same pins as an ordinary Arduino, but most of them are already connected to things on our robot, such as sensors. If you want to follow a tutorial and need to connect to a pin that is already used, then you can very simply unplug the Arduino Nano from the robot. Then you are able to just plug wires into the pins or plug the whole Arduino Nano into a breadboard, before following the tutorial you want to follow.</p>

<p>You do need to select "Arduino Nano" in the "board" menu, even if you are following tutorials for ordinary Arduinos.</p>

<p>Remember that all tutorials on the internet will not know about the BookWorm library.</p>

<fieldset><legend>Websites to learn from</legend>
<p>The official Arduino page on <a href="https://www.arduino.cc/en/Tutorial/Foundations" target="_blank"> fundamental knowledge</a></p>
<p>The official Arduino page on <a href="https://www.arduino.cc/en/Tutorial/BuiltInExamples" target="_blank"> basic example sketches</a></p>
<p>Adafruit Industries: Arduino <a href="https://learn.adafruit.com/ladyadas-learn-arduino-lesson-number-1" target="_blank"> Lesson #1</a>, followed by <a href="https://learn.adafruit.com/ladyadas-learn-arduino-lesson-number-2" target="_blank"> Lesson #2</a></p>
<p>Adafruit Industries: <a href="https://learn.adafruit.com/category/learn-arduino" target="_blank">All Arduino Guides</a></p>
</fieldset>

<p>If you run out of things to try and tutorials to read, you should try doing an entire project that's completely your own. But what should you build? To answer that question, think about what else you find fun and what part of your life could be improved with electronics. I like video games so I've built plenty of different video game controllers. I like Geocaching so I've built my own GPS locator. It doesn't have to be a robot, remember you can take the Arduino Nano off the robot, or just buy another Arduino.</p>

<p>And go join a team, maybe a robotics team, maybe a rocketry club, participate in competitions and hackathons. I've met the greatest people, made many friends, even found love, by looking for other people who love to do what I love to do.</p>

<h2>Homework</h2>

<p>I have a few exercises for you to try programming into your robot for practice. Then, the library will hold a robotics competition, and so the final homework will be for you to be ready for the competition.</p>

<fieldset class="hidable"><legend>Exercise 1</legend>
<div>
<p>By modifying some of the examples, make your robot do a disco dance!</p><p>Just make your motors spin in some sort of pattern and make the LEDs blink at the same time.</p>
<p>This requires you to understand how to spin the motors, how to turn the LEDs on and off, and how to use the delay function.</p>
</div>
</fieldset>

<fieldset class="hidable"><legend>Exercise 2</legend>
<div>
<p>Make your robot chase a TV remote when you press any button.</p>
<p>This will require you to understand how to use <i>if-statements</i>, how to spin the motors, how to read the side sensors, and how to turn the infrared emitters on and off.</p>
<p>Hint: you can use the serial port and serial monitor to read what the infrared phototransistor sees as a number on your screen.</p>
<p>An example answer to this homework exercise is in the sketch called "ChaseTvRemote" (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/blob/master/ArduinoSketchbook/ChaseTvRemote/ChaseTvRemote.ino" target="_blank">github link</a>)</p>
</div>
</fieldset>

<fieldset class="hidable"><legend>Exercise 2 Hint</legend>
<div>
<p>Here's a basic video of what I meant for the robot to do.</p>
<div><video controls="controls" loop="loop" preload="none">
  <source src="vid/exercise2.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>
<p>Sometimes it helps to draw a logic flow diagram before you code.</p>
<div class="center_outer"><div class="center_inner"><a href="img/arduino/exercise2flow.png"><img src="img/arduino/exercise2flow.png" width="100%" /></a></div></div>
</div>
</fieldset>

<fieldset class="hidable"><legend>Exercise 3</legend>
<div>
<p>Make your robot wander around until it sees a wall, and then turn away from the wall so that it can continue going.</p>
<p>This will require you to understand how to use <i>if-statements</i>, how to spin the motors, how to read the side sensors, and how to turn the infrared emitters on and off.</p>
<p>Hint: you can use the serial port and serial monitor to read what the infrared phototransistor sees as a number on your screen.</p>
<p>An example answer to this homework exercise is in the sketch called "WallAvoider" (<a href="https://github.com/frank26080115/SSF-PublicLibrary-Robot2018/blob/master/ArduinoSketchbook/WallAvoider/WallAvoider.ino" target="_blank">github link</a>). This sketch will introduce you to <i>while-loops</i> and <i>do-while-loops</i>.</p>
<div><video controls="controls" loop="loop" preload="none">
  <source src="vid/wallavoider.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>
<p>Wanna see more videos? Try <a href="https://www.google.com/search?q=micromouse&source=lnms&tbm=vid" target="_blank">watching a Micromouse robot competition</a>.</p>
</div>
</fieldset>

<fieldset class="hidable"><legend>Competition</legend>
<div>
<p>The library will hold a line-following robot race. There will be a black line on a white floor as the race track, and your robot must follow the black track from the start to the finish line. The fastest robot wins.</p>
<p>This will require you to understand how to use <i>if-statements</i>, how to spin the motors, and how to read the floor sensors.</p>
<p>Hint: you can use the serial port and serial monitor to read what the infrared phototransistor sees as a number on your screen.</p>
<p>Hint: ask yourself "if your left side floor sensor sees the black line, what should your robot do?"</p>
<div><video controls="controls" loop="loop" preload="none">
  <source src="vid/linefollow.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video></div>
</div>
</fieldset>

<h2>Asking Questions, and participating in online communities</h2>

<p>If you have a question, I am not the only person who can help. There's an entire internet full of people who can help you. But people on the internet get really annoyed if you ask a question in a wrong way, or worse, when you shouldn't be asking that question. Also, some people on the internet might sound very mean but they are not actually being mean, I don't want you to get offended when you read any answers.</p>

<p>The correct time and correct way to ask a question on the internet is actually a very large, and funny topic. There's an actually very famous webpage about how to ask questions:<br /><a href="http://www.catb.org/~esr/faqs/smart-questions.html#intro" target="_blank">http://www.catb.org/~esr/faqs/smart-questions.html<br />"<b>How To Ask Questions The Smart Way</b>" by Eric Steven Raymond and Rick Moen</a></p>
<p>(Eric and Rick wrote that webpage, they don't know much about Arduino and robotics so please do not email them)</p>

<p>The internet is sometimes a dangerous place. Remember, the people of almost any hobbyist community are really nice people, but the internet is visible to <b>all</b> people. You should definitely avoid ever writing your real name, phone number, email address, or real address. Somebody might pretend to be you, or give you prank phone calls, spam emails, or send the police to your house.</p>

<p>For our robot and Arduino in general, the best website to ask questions on are:</p>
<ul>
	<li>The official <a href="https://forum.arduino.cc/" target="_blank">Arduino Forum</a></li>
	<li><a href="https://www.reddit.com/r/arduino/" target="_blank">/r/arduino</a> , the subreddit of Arduino on Reddit</li>
	<li><a href="https://arduino.stackexchange.com/" target="_blank">Arduino Stack Exchange</a></li>
</ul>

<div class="noprint"><br /><br /><hr /><h3><a href="index.htm">Click Here, to return to the list of classes</a></h3></div>

</div>
</body>
</html>